#!/bin/bash
# Bash version of yona

CONFIG_DIR=${XDG_CONFIG_DIR:-$HOME/.config/yona}


function error {
	echo -e "\e[31mYona Error: $1\e[0m" >&2
	exit 1
}

function print_help {
	cat <<- EOF
	Yona: the script that stands in the blush of the build v0.3.0
	Usage:
	    [1myona PROJECT_COMMAND[0m
	Runs a command called PROJECT_COMMAND specified in the closest 
	"Project commands" file. This can be any one of:
	    1. A .yona file
	    2. A Makefile
	    3. A package.json
	Commands are prioritised in that order, so a "build" command in both a .yona &
	a Makefile results in the yona script being run.
	A .yona file has the format
	    COMMAND_NAME = SHELL_COMMAND
	where SHELL_COMMAND must not contain [3many[0m newlines, even with a "\".
	    [1myona [-l|--list] [DIRECTORY][0m
	Lists project commands currently available.
	    [1myona [-f|--file] [run|compile] FILE[0m
	Runs or compiles FILE according to its filetype. Checks whether an executable
	with the name part of FILE (that is, the name without extension) plus a special
	extension exists already, and if it does, executes that when asked to run FILE.
	The special extension is ".yonax" by default.
	    [1myona [-s|--shell] SHELL_COMMAND[0m
	Runs SHELL_COMMAND at project root, i.e. whereever the nearest source of project 
	commands is.
	EOF
}


function print_version {
	echo -e "Yona of the build v0.3.0"
}


# get file extension, name, name part, & parent directory
function get_fileinfo {
	PARENT=$(dirname $1)
	NAME=$(basename $1)
	NAME_PART=${NAME%%.*}
	EXT=${NAME##*.}
}


# Does its level best to "run" the given file, whatever that may mean for that 
# file. Mostly it will just choose the right interpreter for the job (python, 
# lua, etc.), but if it finds an executable whose name is the "name part" of
# the file + $EXE_EXT, it will try to run that instead.
# Parameters:
#	$1 = The absolute path to the file
function run_file {
	source $CONFIG_DIR/run.sh
	echo -e $START_MSG
	get_fileinfo $1
	cd $PARENT
	if [[ -x "$NAME_PART$EXE_EXT" ]]; then
		./$NAME_PART$EXE_EXT
		echo -e $END_MSG
		return
	fi
	if [[ -n "${RUNNERS[$EXT]}" ]]; then
		# replace %< & % with name part & name, and then run it
		TO_RUN=${RUNNERS[$EXT]/\%\</$NAME_PART}
		TO_RUN=${TO_RUN/\%\+/$NAME_PART$EXE_EXT}
		eval "${TO_RUN/\%/$NAME}"
		echo -e $END_MSG
		return
	fi
}

# Compiles the given file with the relevant program based on the file's 
# extension.
# Parameters:
#	$1 = The absolute path to the file
function compile_file {
	source $CONFIG_DIR/compile.sh
	echo -e $START_MSG
	get_fileinfo $1
	cd $PARENT
	if [[ -n ${COMPILERS[$EXT]} ]]; then
		# replace %< & % with name part & name, and then run it
		TO_RUN=${COMPILERS[$EXT]/\%\</$NAME_PART}
		TO_RUN=${TO_RUN/\%\+/$NAME_PART$EXE_EXT}
		eval "${TO_RUN/\%/$NAME}"
		echo -e $END_MSG
		return
	fi
}

function project_mode {
	until [[ "$(pwd)" == / ]]
	do
		if [ -f '.yona' ]
		then
			LINE=$(grep "^$1 = " '.yona')
			if [[ -n "$LINE" ]]; then
				eval "${LINE#*= }"
				return
			fi
			error "Invalid project command!"
		fi
		if [ -f 'Makefile' ]
		then
			if [ -n "$(grep "^$1:" Makefile)" ]
			then
				make $1
				return
			fi
			error "Invalid project command!"
		fi
		if [ -f 'package.json' ]
		then
			if [ "$(jq .scripts.$1 package.json)" != 'null' ]
			then
				npm run $1
				return
			fi
			error "Invalid project command!"
		fi
		cd ..
	done
	error "Not in a project!"
}


function shell_mode {
	until [ "$(pwd)" = / ]
	do
		if [ -f '.yona' ]
		then
			eval "$@"
			return
		fi
		if [ -f 'Makefile' ]
		then
			eval "$@"
			return
		fi
		if [ -f 'package.json' ]
		then
			eval "$@"
			return
		fi
		if [ -d '.git' -o -d '.hg' ]
		then
			eval "$@"
			return
		fi
		cd ..
	done
	error "Not in a project!"
}

function list_commands {
	until [ "$(pwd)" = / ]
	do
		if [ -f '.yona' ]
		then
			echo -e "\e[1mYona Commands:\e[0m"
			$CAT_PROVIDER .yona
			REACHED_PROJ_ROOT=TRUE
		fi
		if [ -f 'Makefile' ]
		then
			echo -e "\e[1mMake Commands:\e[0m"
			$CAT_PROVIDER Makefile
			REACHED_PROJ_ROOT=TRUE
		fi
		if [ -f 'package.json' ]
		then
			echo -e "\e[1mnpm scripts\e[0m"
			jq .scripts package.json
			REACHED_PROJ_ROOT=TRUE
		fi
		if [ -n "$REACHED_PROJ_ROOT" ]
		then
			return
		fi
		cd ..
	done
	error "Not in a project!"
}
	

# calls the run_file or compile_file functions
function single_file_mode {
	case $1 in
		run) run_file $2;;
		compile) compile_file $2;;
		*) error "Invalid file command!\nUse either run or compile.";;
	esac
}


source $CONFIG_DIR/config.sh
case $1 in
	-f|--file) single_file_mode $2 $3;;
	-s|--shell)
		shift
		shell_mode $@;;
	-l|--list) list_commands;;
	-h|--help) print_help;;
	-v|--version) print_version;;
	*) project_mode $@;;
esac
