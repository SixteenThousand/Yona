#!/bin/bash
# Bash version of yona

YONA_FILE=".yona"
EXE_EXT=".yonax"

# messages to display once the single file mode operations are complete
COMPILE_END_MSG="\n\nCompiled! Maybe!"
RUN_END_MSG="\n\nProgram Run! Perhaps! Maybe! Possibly!"

# the filetypes supported by yona (single file mode)
# note that in the "SPECIAL" arrays, %< will be substituted for the name
# part and % will be substituted for the filename
declare -A COMPILERS
COMPILERS[hs]="ghc -Wno-tabs"
COMPILERS[java]="javac17 -Xlint:unchecked"
COMPILERS[ts]="tsc --target esnext"

declare -A SPECIAL_COMPILERS
SPECIAL_COMPILERS[c]="gcc -o %<$EXE_EXT %"
SPECIAL_COMPILERS[go]="go build -o %<$EXE_EXT %"
SPECIAL_COMPILERS[tex]="pdflatex -output-directory='tex-logs' % && mv tex-logs/%<.pdf ."
SPECIAL_COMPILERS[ml]="ocamlc -o %<$EXE_EXT %"
SPECIAL_COMPILERS[rs]="rustc -A dead-code -o %<$EXE_EXT %"
SPECIAL_COMPILERS[cpp]="g++ -o %<$EXE_EXT %"

declare -A RUNNERS
RUNNERS[go]="go run"
RUNNERS[hs]="runghc"
RUNNERS[js]="node"
RUNNERS[lisp]="sbcl --script"
RUNNERS[lua]="lua"
RUNNERS[mjs]="node"
RUNNERS[ml]="ocaml"
RUNNERS[php]="php"
RUNNERS[ps1]="pwsh"
RUNNERS[py]="python"
RUNNERS[rb]="ruby"
RUNNERS[sql]="psql -f"
RUNNERS[sh]="bash"
RUNNERS[bash]="bash"
RUNNERS[fish]="fish"
RUNNERS[pl]="perl"

declare -A SPECIAL_RUNNERS
SPECIAL_RUNNERS[java]="java17 %<"
    # adding EXE_EXT to a class file would break imports
SPECIAL_RUNNERS[ts]="node %<$EXE_EXT.js"


initialise () {
    DEFAULT_YONA_FILE='show = pwd && cat .yona'
    if [[ -z "$1" ]]; then
        echo -e $DEFAULT_YONA_FILE >> $YONA_FILE
    else
        echo -e $1 >> $YONA_FILE
    fi
}

print-help () {
echo -e "\
Yona: the script that stands in the blush of the build v0.0.1 - bash version
Usage:
    yona [ -s | --single-file] [ run | compile ] FILEPATH
    yona COMMAND
    yona [ sh | shell ] SHELL_COMMAND
SINGLE FILE MODE
yona [ -s | --single-file ] [ run | compile ] FILEPATH
    tries to compile/run FILEPATH as best it can based off of the extension 
    of FILEPATH. Will run an executable with the same \"name part\" (i.e. 
    name without extension) first if possible.
yona COMMAND
    runs a command specified by COMMAND at the topmost level of the project 
    that the pwd is in, if any. Specifically, yona looks for a file called 
    \".yona\", which will have contents of the form below:
        build = BUILD_COMMAND
        test = TEST_COMMAND
        ...
   yona will then see if any line in this file has COMMAND before the equals 
   sign, and if so run the command to the right of the equals sign at the 
   directory where the .yona file was found.
   yona will first check if the pwd is in a git repository, and if so look 
   for .yona there. If that fails, it will look through the ancestor of pwd 
   until it either finds a .yona file or reaches root.
yona [ sh | shell ] SHELL_COMMAND
    Runs SHELL_COMMAND at project root (see above). Overrides the above 
    syntax if there is a conflict (i.e. you make a yona command called 
    "shell" or "sh"). So, for example:
        yona sh grep \"fish\"
    would find the project root and then run \`grep \"fish\"\` there.
"
}


print-version () {
echo -e "Yona of the build v0.2 - bash version"
}


# get file extension, name, name part, & parent directory
get-fileinfo () {
PARENT=$(dirname $1)
NAME=$(basename $1)
NAME_PART=${NAME%%.*}
EXT=${NAME##*.}
}


# Does its level best to "run" the given file, whatever that may mean for that 
# file. Mostly it will just choose the right interpreter for the job (python, 
# lua, etc.), but if there is another file whose name is the "name part" of 
# the file (i.e., the file name with any extension removed) which is 
# executable, it will try to run that instead.
# Parameters:
#     $1 = the absolute path to the file
run-file () {
echo -e "\nPreparing to run . . .\n\n"
get-fileinfo $1
cd $PARENT
if [[ -x $NAME_PART$EXE_EXT ]]; then
    ./$NAME_PART$EXE_EXT
    echo -e $RUN_END_MSG
    return
fi
if [[ -n ${RUNNERS[$EXT]} ]]; then
    eval "${RUNNERS[$EXT]} $NAME"
    echo -e $RUN_END_MSG
    return
fi
if [[ -n ${SPECIAL_RUNNERS[$EXT]} ]]; then
    # replace %< & % with name part & name, and then run it
    TO_RUN=${SPECIAL_RUNNERS[$EXT]/\%\</$NAME_PART}
    eval "${TO_RUN/\%/$NAME}"
    echo -e $RUN_END_MSG
    return
fi
}

# Compiles the given file with the relevant program based on the file's 
# extension.
# Parameters:
#     $1 = the absolute path to the file
compile-file () {
echo -e "\nPreparing to compile . . .\n\n"
get-fileinfo $1
cd $PARENT
if [[ -n "${COMPILERS[$EXT]}" ]]; then
    eval "${COMPILERS[$EXT]} $NAME"
    echo -e $COMPILE_END_MSG
    return
fi
if [[ -n ${SPECIAL_COMPILERS[$EXT]} ]]; then
    # replace %< & % with name part & name, and then run it
    TO_RUN=${SPECIAL_COMPILERS[$EXT]/\%\</$NAME_PART}
    eval "${TO_RUN/\%/$NAME}"
    echo -e $COMPILE_END_MSG
    return
fi
}

# Runs a given command at project root. Looks for the git root first, then if 
# that fails looks for a file called '.yona' in the ancestors of pwd.
# Looks for command with the name of $1 in .yona, unless that command is
# shell,sh, etc., in which case it just passes all other arguments asa
# command to bash
# Parameters:
#     $1 = name of command given in .yona file
#     ${2,3,...} = arguments to pass to the command in the .yona file
project-command () {
case $1 in
    sh | shell)
        shift 1
        eval "$@"
        return;;
    root) pwd && return;;
    *) 
        LINE=$(grep "^$1 = " $YONA_FILE)
        if [[ -z "$LINE" ]]; then
            echo "Yona Error: Undefined project command!" >&2
            exit 1
        fi
        eval "${LINE#*= }";;
 esac
}

# calls the project-command function, if it can find a .yona file
project-mode () {
PROJ_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)
START_DIR=$(pwd)
if [[ -n "$PROJ_ROOT" ]]; then
    cd $PROJ_ROOT
    if [[ -e .yona ]]; then
        project-command $@
        return
    fi
fi
cd $START_DIR
until [[ $(pwd) == / ]]; do
    if [[ -e .yona ]]; then
        project-command $@
        return
    fi
    cd ..
done
echo "Yona Error: No .yona file!" >&2
exit 1
}


# calls the run-file or compile-file functions
single-file-mode () {
case $1 in
    run) run-file $2;;
    compile) compile-file $2;;
    *) echo -e "Invalid file command!\nUse either run or compile.";;
esac
}


case $1 in
    -s | --single-file) single-file-mode $2 $3;;
    -h | --help) print-help;;
    -v | --version) print-version;;
    init) initialise $2;;
    *) project-mode $@;;
esac

unset YONA_FILE EXE_EXT COMPILE_END_MSG RUN_END_MSG COMPILERS RUNNERS \
    SPECIAL_COMPILERS SPECIAL_RUNNERS NAME_PART PARENT EXT NAME TO_RUN LINE \
    START_DIR PROJ_ROOT
unset -f initialise print-help print-version get-fileinfo run-file \
    compile-file project-command project-mode single-file-mode
